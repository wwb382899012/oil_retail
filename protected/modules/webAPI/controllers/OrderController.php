<?php

/**
 * Desc: 订单
 * User: wwb
 * Date: 2017/10/9 0009
 * Time: 10:03
 */


class OrderController extends WebAPIController
{
    public function pageInit()
    {
        parent::pageInit(); // TODO: Change the autogenerated stub
        $this->rightCode = 'order';
    }

    /**
     * @api {POST} /webAPI/order/list [list]订单列表
     * @apiName list
     * @apiGroup WebAPI - order
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {string} search 查询字段，<font color=red>非必填</font>
     * @apiParam (输入字段) {int} page 页数 <font color=red>非必填</font>
     * @apiParam (输入字段) {int} pageSize 分页大小 <font color=red>非必填</font>
     * @apiExample {json} 输入示例:
     * {
     * "page":2,
     * "pageSize":15,
     * "search"{
     *      "create_start_time":'订单交易开始时间',
     *      "create_end_time":'订单交易结束时间',
     *      "code":'订单编号',
     *      "customer_name":"司机姓名",
     *      "customer_phone":"司机手机号",
     *      "logistics_name":"物流企业名",
     *      "station_name":"油站名",
     *      "vehicle_number":'车牌号',
     *      "status":'订单状态',
     *      }
     * }
     * @apiSuccessExample {json} 输出示例:
     *{
     *"state": 0,
     *"data": {
     *      "pageSize": 10,
     *      "totalPages": 1,
     *      "page": "1",
     *      "totalRows": "1",
     *      "data": [{
     *          "order_id": "订单id",
     *          "code": "订单编号",
     *          "status": "订单状态",
     *          "order_type":"补单",
     *          "status_desc": "订单状态描述",
     *          "quantity": "升数",
     *          "sell_amount": "油品总销售价，单位：分",
     *          "buy_amount": "油品总采购价，单位：分",
     *          "price_retail": "零售价，单位：分",
     *          "price_buy": "协议价/采购价，单位：分",
     *          "price_sell": "优惠价/销售价，单位：分",
     *          "create_time": "订单提交时间(订单交易时间)，格式：yyyy-mm-dd HH:MM:SS",
     *          "effect_time": "订单生效时间，格式：yyyy-mm-dd HH:MM:SS",
     *          "failed_reason": "失败原因",
     *          "goods_id": "油品id",
     *          "goods_name": "油品名",
     *          "customer_id": "司机id",
     *          "customer_name": "司机名称",
     *          "customer_phone": "手机号码",
     *          "logistics_id": "物流公司id",
     *          "logistics_name": "物流公司名称"
     *          "vehicle_id": "车辆id",
     *          "vehicle_number": "车牌号",
     *          "vehicle_model": "车型",
     *          "oil_station_id": "油站id",
     *          "oil_station_name": "油站名",
     *          "oil_station_address": "油站地址"
     *          }],
     *      }
     *}
     * 失败返回：
     * {
     * "state":1003, //错误码
     * "data":"failed"
     * }
     * @apiParam (输出字段) {string} state 错误码，为0时表示成功，其他参考错误码说明
     * @apiParam (输出字段) {string} data 成功或错误信息
     * @apiVersion 1.0.0
     */
    public function actionList()
    {
        $search = $this->getSearch();
        $attr = array(
            'o.code*' => !empty($search['code']) ? $search['code'] : '',
            'v.number*' => !empty($search['vehicle_number']) ? $search['vehicle_number'] : '',
            'o.status' => !empty($search['status']) ? $search['status'] : '',
            'o.create_time>' => !empty($search['create_start_time']) ? $search['create_start_time'] : '',
            'o.create_time<' => !empty($search['create_end_time']) ? $search['create_end_time'] : '',
            'd.name*' => !empty($search['customer_name']) ? $search['customer_name'] : '',
            'd.phone*' => !empty($search['customer_phone']) ? $search['customer_phone'] : '',
            'l.name*' => !empty($search['logistics_name']) ? $search['logistics_name'] : '',
            's.name*' => !empty($search['station_name']) ? $search['station_name'] : '',
        );

        $sql = "select {col} from t_order o 
                left join t_oil_goods g on g.goods_id = o.goods_id 
                left join t_driver d on d.customer_id = o.customer_id 
                left join t_logistics_company l on l.logistics_id = o.logistics_id 
                left join t_vehicle v on v.vehicle_id = o.vehicle_id 
                left join t_oil_station s on s.station_id = o.station_id 
                " . $this->getWhereSql($attr) . " order by o.create_time desc";

        $fields = 'o.*, g.name as goods_name, d.name as customer_name, d.phone as customer_phone, l.name as logistics_name, 
                   v.number as vehicle_number, v.model as vehicle_model, s.name as oil_station_name, s.address as oil_station_address';

        $data = $this->getPageData($sql, $fields);

        if (Utility::isEmpty($data->data))
        {
            $this->returnSuccess([]);
        }

        foreach ($data->data as &$v)
        {
            $v['status_name'] = Map::getStatusName('order_status', $v['status']);
            $v['order_type'] = empty($v['remark'])?'正常':'补单';
            $v['sell_amount'] = $v['price_sell'] *  $v['quantity'];
            $v['buy_amount'] = $v['price_buy'] *  $v['quantity'];
            $v['is_can_view'] = true;
            $v['is_can_edit'] = false;
        }

        $this->returnSuccess($data);
    }

    /**
     * @api {GET} /webAPI/order/detail [detail]获取订单详情
     * @apiName detail
     * @apiGroup WebAPI - order
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {int} order_id 订单id <font color=red>必填</font>
     * @apiExample {json} 输入示例:
     * {
     * "order_id":"订单id",
     * }
     * @apiSuccessExample {json} 输出示例:
     *{
     * "state": 0,
     * "data":{
     *      "order_id": "订单id",
     *      "code": "订单编号",
     *      "status": "订单状态",
     *      "status_desc": "订单状态描述",
     *      "quantity": "升数",
     *      "sell_amount": "油品总销售价，单位：分",
     *      "buy_amount": "油品总采购价，单位：分",
     *      "retail_price": "零售价，单位：分",
     *      "agreed_price": "协议价，单位：分",
     *      "discount_price": "优惠价，单位：分",
     *      "create_time": "订单提交时间，格式：yyyy-mm-dd HH:MM:SS",
     *      "effect_time": "订单生效时间，格式：yyyy-mm-dd HH:MM:SS",
     *      "failed_reason": "失败原因",
     *      "remark":"备注",
     *      "order_type":"补单",
     *      "goods": {
     *          "id": "油品id",
     *          "name": "油品名",
     *      }
     *      "customer": {
     *          "id": "司机id",
     *          "name": "司机名称",
     *          "phone": "手机号码",
     *      },
     *      "logistics" {
     *          "id": "物流公司id",
     *          "name": "物流公司名称"
     *      }
     *      "vehicle": {
     *          "id": "车辆id",
     *          "number": "车牌号",
     *          "model": "车型",
     *      }
     *      "oil_station": {
     *          "id": "油站id",
     *          "name": "油站名",
     *          "address": "油站地址",
     *      }
     * }
     * }
     * 失败返回：
     * {
     * "state":1003, //错误码
     * "data":"failed"
     * }
     * @apiParam (输出字段) {string} state 错误码，为0时表示成功，其他参考错误码说明
     * @apiParam (输出字段) {string} data 成功或错误信息
     */
    public function actionDetail()
    {
        $id = Mod::app()->request->getParam('order_id');
        if (!Utility::checkQueryId($id))
        {
            $this->returnError(RetailError::$PARAMS_PASS_ERROR);
        }

        //订单
        try
        {
            $order = \ddd\Infrastructure\DIService::get(\ddd\Order\Application\OrderOutService::class)->getOrderDetail($id);

            if (empty($order))
            {
                $this->returnError(BusinessError::outputError(\RetailError::$ORDER_NOT_EXIST, array('order_id' => $id)));
            }

            $this->returnSuccess($order);
        } catch (Exception $e)
        {
            $this->returnError(BusinessError::outputError(\RetailError::$OPERATE_FAILED, array('reason' => $e->getMessage())));
        }
    }

    /**
     * @api {POST} /webAPI/order/export [export]订单导出
     * @apiName export
     * @apiGroup WebAPI - order
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {string} search 查询字段，<font color=red>非必填</font>
     * @apiParam (输入字段) {int} page 页数 <font color=red>非必填</font>
     * @apiParam (输入字段) {int} pageSize 分页大小 <font color=red>非必填</font>
     * @apiExample {json} 输入示例:
     * {
     * "page":2,
     * "pageSize":15,
     * "search"{
     *      "create_start_time":'订单交易开始时间',
     *      "create_end_time":'订单交易结束时间',
     *      "code":'订单编号',
     *      "customer_name":"司机姓名",
     *      "customer_phone":"司机手机号",
     *      "logistics_name":"物流企业名",
     *      "station_name":"油站名",
     *      "vehicle_number":'车牌号',
     *      "status":'订单状态',
     *      }
     * }
     * @apiVersion 1.0.0
     */
    public function actionExport()
    {
        $search = $this->getSearch();
        $attr = array(
            'o.code*' => !empty($search['code']) ? $search['code'] : '',
            'v.number*' => !empty($search['vehicle_number']) ? $search['vehicle_number'] : '',
            'o.status' => !empty($search['status']) ? $search['status'] : '',
            'o.create_time>' => !empty($search['create_start_time']) ? $search['create_start_time'] : '',
            'o.create_time<' => !empty($search['create_end_time']) ? $search['create_end_time'] : '',
            'd.name*' => !empty($search['customer_name']) ? $search['customer_name'] : '',
            'd.phone*' => !empty($search['customer_phone']) ? $search['customer_phone'] : '',
            'l.name*' => !empty($search['logistics_name']) ? $search['logistics_name'] : '',
            's.name*' => !empty($search['station_name']) ? $search['station_name'] : '',
        );

        $fields = 'o.create_time 订单交易时间, concat(o.code, " ") 订单编号, v.number 车牌号, d.name 司机姓名, d.phone 手机号码, l.name 物流公司, g.name 油品, 
                   o.quantity 升数, round(o.price_sell/100, 2) 优惠单价, round(o.price_sell*o.quantity/100, 2) 油品总价, o.status, s.address 加油站地址';

        $sql = "select " . $fields . " from t_order o 
                left join t_oil_goods g on g.goods_id = o.goods_id 
                left join t_driver d on d.customer_id = o.customer_id 
                left join t_logistics_company l on l.logistics_id = o.logistics_id 
                left join t_vehicle v on v.vehicle_id = o.vehicle_id 
                left join t_oil_station s on s.station_id = o.station_id 
                " . $this->getWhereSql($attr) . " order by o.create_time desc";

        $data = Utility::query($sql);

        if(Utility::isEmpty($data))
        {
            $this->renderError("导出数据为空！");
        }

        foreach ($data as &$v)
        {
            $v['订单状态'] = Map::getStatusName('order_status', $v['status']);
            unset($v['status']);
        }

        $this->exportExcel($data);
    }

    /**
     * @api {POST} /webAPI/order/repairOrder [repairOrder]补单
     * @apiName repairOrder
     * @apiGroup WebAPI - order
     * @apiVersion 1.0.0
     * @apiParam  {string} logistics_id 物流企业id <font color=red>必填</font>
     * @apiParam  {string} customer_id 司机id <font color=red>必填</font>
     * @apiParam  {string} vehicle_id 车辆id <font color=red>必填</font>
     * @apiParam  {string} station_id 油站id <font color=red>必填</font>
     * @apiParam  {string} goods_id 油品id <font color=red>必填</font>
     * @apiParam  {string} quantity 升数 <font color=red>必填</font>
     * @apiParam  {string} remark 备注 <font color=red>必填</font>
     *
     * @apiExample {json} 输入示例:
     * {
     * "logistics_id"=>'1',
     * "customer_id"=>'6',
     * "vehicle_id"=>'13',
     * "station_id"=>'1',
     * "goods_id"=>'4',
     * "quantity"=>'11.2',
     * "remark"=>'补单',
     * }
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回：
     * {
     *      "state":0,
     *      "data":"成功信息"
     * }
     * 失败返回：
     * {
     *      "state":1,
     *      "data": "错误信息"
     * }
     * @apiParam (输出字段) {string} state 错误码
     * @apiParam (输出字段) {array} data 操作信息
     */

    public function actionRepairOrder()
    {
        $logistics_id = $this->getRestParam('logistics_id');
        $customer_id = $this->getRestParam('customer_id');
        $vehicle_id = $this->getRestParam('vehicle_id');
        $station_id = $this->getRestParam('station_id');
        $goods_id = $this->getRestParam('goods_id');
        $quantity = $this->getRestParam('quantity');
        $remark = $this->getRestParam('remark');

        if(empty($remark))
            $this->returnError(\BusinessError::outputError(\RetailError::$OPERATE_FAILED,array('reason'=>'备注不能为空')));

        try{
            $customer = \ddd\Infrastructure\DIService::getRepository(\ddd\Logistics\Domain\Driver\IDriverRepository::class)->findById($customer_id);
            $customerTransPassword = $customer->password;

            $result = \ddd\Order\Application\OrderOutService::service()->doOrder($customer_id,$vehicle_id,$station_id,$goods_id,$quantity,$customerTransPassword,$remark);
            if($result)
                $this->returnSuccess();

        }catch(Exception $e){
            $this->returnError(\BusinessError::outputError(\RetailError::$OPERATE_FAILED,array('reason'=>$e->getMessage())));
        }
    }
}

