<?php

use app\ddd\Admin\Application\Right\AuthorizeService;
use app\ddd\Admin\Application\User\UserService;
use ddd\Admin\Application\Right\UserRightService;
use ddd\Admin\Application\Role\RoleService;
use ddd\Admin\DTO\User\SystemUserDTO;
use ddd\Admin\DTO\User\RightCodeDTO;
use ddd\Admin\DTO\User\UserRightDTO;

/**
 * User: liyu
 * Date: 2018/9/6
 * Time: 10:58
 * Desc: UserController.php
 */
class UserController extends WebAPIController
{


    public function pageInit() {
        parent::pageInit(); // TODO: Change the autogenerated stub
        $this->rightCode = 'system-user';
//        $this->publicActions = ["list", "detail", "save", 'del', 'getRoles', 'right', 'saveRight', 'userRight'];
        $this->authorizedActions = ['getRoles'];
    }

    /**
     * @api {POST} /admin/user/list [list]系统用户列表
     * @apiName list
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {string} search 查询字段，<font color=red>非必填</font>
     * @apiParam (输入字段) {int} page 页数 <font color=red>非必填</font>
     * @apiParam (输入字段) {int} pageSize 分页大小 <font color=red>非必填</font>
     * @apiExample {json} 输入示例:
     * {
     * "page":2,
     * "pageSize":15,
     * "search"{
     *      "user_name":'liyu',
     *      "name":'2',
     *      "main_role_id":1,
     *      "role_id":'1',
     *      }
     * }
     * @apiSuccessExample {json} 输出示例:
     *{
     *    "state": 0,
     *    "data": {
     *        "search": null,
     *        "total": "3",
     *        "page": "1",
     *        "data": {
     *            "pageCount": 1,
     *            "rows": [
     *                {
     *                    "user_id": "2",
     *                    "user_name": "liyu",
     *                    "password": "e10adc3949ba59abbe56e057f20f883e",
     *                    "role_ids": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
     *                    "right_codes": "",
     *                    "login_key": "",
     *                    "login_count": "134",
     *                    "login_time": "2018-09-05 15:19:10",
     *                    "identity": "",
     *                    "main_role_id": "1",
     *                    "weixin": "",
     *                    "phone": "15013408878",
     *                    "email": "",
     *                    "status": "1",
     *                    "is_right_role": "0",
     *                    "corp_ids": "18,17,16,15,14,13,9,8,7,6,4,3,2,1",
     *                    "name": "李钰",
     *                    "remark": "",
     *                    "create_user_id": "1",
     *                    "create_time": "2018-04-25 15:47:51",
     *                    "update_user_id": "2",
     *                    "update_time": "2018-08-27 16:51:22",
     *                    "role_name": null
     *                }
     *            ]
     *        }
     *    }
     *}
     * @apiParam (输出字段) {string} state 状态码
     * @apiParam (输出字段) {array} data 数据信息
     * @apiParam (输出字段-data) {string} search 查询字段
     * @apiParam (输出字段-data) {array} data 列表数据
     * @apiParam (输出字段-data-data) {int} pageCount 列表总页数
     * @apiParam (输出字段-data-data) {int} total 列表总记录数
     * @apiParam (输出字段-data-data) {int} page 当前页数
     * @apiParam (输出字段-data-data) {array} rows 列表行数据信息
     */
    public function actionList() {
        $search = $this->getSearch();
        $attr = array(
            'a.user_name*' => $search['user_name'],
            'a.name*' => $search['name'],
            'a.main_role_id' => $search['main_role_id'],
        );

        $query = "";
        if (!empty($search['role_id'])) {
            $role_id = $search['role_id'];
            unset($search['role_id']);
            $query .= " and exists(select 1 from t_user_role_relation where user_id=a.user_id and role_id=" . $role_id . ")";
        }
        $sql = "select {col}"
            . " from t_system_user a 
                left join t_system_role r on a.main_role_id=r.role_id"
            . $this->getWhereSql($attr);
        $sql .= $query;
        $sql .= " order by a.login_time desc,a.user_id desc";

        $data = $this->getPageData($sql, "a.*,r.name role_name");

        if (!empty($corp_id))
            $attr["corp_id"] = $corp_id;
        if (!empty($role_id))
            $attr["role_id"] = $role_id;

        if (empty($data)) {
            $this->returnSuccess([]);
        }

        $current_uid = UserUtility::getNowUserId();
        foreach ($data->data as & $datum) {
            $datum['is_can_del'] = false;
            $datum['is_can_auth'] = true;
            $datum['is_can_edit'] = true;
            $datum['is_can_view'] = true;

            //超级管理员不能被删除
//            if (UserUtility::isAdminUser([$datum['role_ids']])) {
//                $datum['is_can_auth'] = false;
//                $datum['is_can_edit'] = false;
//                //当前操作用户是超级管理员，允许编辑、删除其他管理员账号
//                if (UserUtility::isAdminOfCurrentUser()) {
//                    $datum['is_can_auth'] = true;
//                    $datum['is_can_edit'] = true;
//                }
//                //超级管理员不能被删除自己
//                if ($datum['user_id'] == $current_uid) {
//                    $datum['is_can_del'] = false;
//                }
//            }
        }

        $this->returnSuccess($data);
    }


    /**
     * @api {GET} /admin/user/detail [detail]用户详情
     * @apiName detail
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {int} user_id 用户ID <font color=red>必填</font>
     * @apiExample {json} 输入示例:
     * {
     * "user_id":2
     * }
     * @apiSuccessExample {json} 输出示例:
     *{
     *    "state": 0,
     *    "data": {
     *        "user_id": "2",
     *        "user_name": "liyu",
     *        "password": "e10adc3949ba59abbe56e057f20f883e",
     *        "role_array": null,
     *        "main_role_id": null,
     *        "main_role_name": null,
     *        "confirmPassword": null,
     *        "identity": "",
     *        "weixin": "",
     *        "phone": "15013408878",
     *        "email": "",
     *        "status": "1",
     *        "is_right_role": null,
     *        "name": "李钰",
     *        "remark": ""
     *    }
     *}
     * @apiParam (输出字段) {string} state 状态码
     * @apiParam (输出字段) {array} data 数据信息
     */
    public function actionDetail() {
        $id = Mod::app()->request->getParam('user_id');
        if (!Utility::checkQueryId($id)) {
            $this->returnError(RetailError::$PARAMS_PASS_ERROR);
        }
        $service = new UserService();
        $user = $service->getUserDetail($id);
        if (empty($user))
            $this->renderError(RetailError::$USER_INFO_NOT_EXIST, array('user_id' => $id));

        $this->returnSuccess($user);
    }

    /**
     * @api {GET} /admin/user/save [save]用户信息修改保存
     * @apiName save
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {int} user_id 用户ID <font color=red>修改时必填</font>
     * @apiParam (输入字段) {string} user_name 用户名 <font color=red>必填</font>
     * @apiParam (输入字段) {string} identity 企业微信Id
     * @apiParam (输入字段) {string} password 密码 <font color=red>必填</font>
     * @apiParam (输入字段) {string} name 姓名 <font color=red>必填</font>
     * @apiParam (输入字段) {string} weixin 微信号
     * @apiParam (输入字段) {string} phone 手机 <font color=red>必填</font>
     * @apiParam (输入字段) {string} email Email
     * @apiParam (输入字段) {int} main_role_id 主角色 <font color=red>必填</font>
     * @apiParam (输入字段) {int} status 状态 <font color=red>必填</font> //0未启用 1启用
     * @apiParam (输入字段) {Array} role_array 所属角色
     * @apiParam (输入字段) {int} is_right_role 权限变更 1/选中 0不选
     * @apiParam (输入字段) {string} remark 说明
     * @apiExample {json} 输入示例:
     *{
     *    user_id:5,
     *    user_name: "liyu1",
     *    identity: "xxx",
     *    password: "123456",
     *    confirmPassword: "123456",
     *    name: "李钰",
     *    weixin: "eee",
     *    phone: 18576617068,
     *    email: "",
     *    main_role_id: "1",
     *    main_role_name:"超级管理员",
     *    status: 1,
     *    role_array: [{"id":"1","name":"\u8d85\u7ea7\u7ba1\u7406\u5458"}],
     *    is_right_role: 1,
     *    remark: "xxx"
     *}
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回：
     * {
     *      "state":0,
     *      "data":"成功信息"
     * }
     * 失败返回：
     * {
     *      "state":1,
     *      "data": "错误信息"
     * }
     * @apiParam (输出字段) {string} state 错误码
     * @apiParam (输出字段) {array} data 操作信息
     */
    public function actionSave() {
        $params = $this->getRestParams();
        if (empty($params)) {
            $this->renderError(RetailError::$PARAMS_PASS_ERROR);
        }

        $dto = new SystemUserDTO();
        $dto->assignDTO($params);
        if (!$dto->validate()) {
            $this->returnError(BusinessError::outputError(RetailError::$OPERATE_FAILED, array('reason' => $this->formatModelErrors($dto->getErrors()))));
        }

        try {
            $entity = $dto->toEntity();
            $service = new UserService();
            $res = $service->save($entity);
            if (is_string($res))
                $this->returnError($res);
            else
                $this->returnSuccess();
        } catch (Exception $e) {
            $this->returnError(BusinessError::outputError(RetailError::$OPERATE_FAILED, array('reason' => $e->getMessage())));
        }
    }


    /**
     * @api {GET} /admin/user/del [del]用户信息删除
     * @apiName del
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     * @apiParam (输入字段) {int} user_id 用户ID <font color=red>修改时必填</font>
     * @apiExample {json} 输入示例:
     *{
     *    user_id:5,
     *}
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回：
     * {
     *      "state":0,
     *      "data":"成功信息"
     * }
     * 失败返回：
     * {
     *      "state":1,
     *      "data": "错误信息"
     * }
     * @apiParam (输出字段) {string} state 错误码
     * @apiParam (输出字段) {array} data 操作信息
     */
    public function actionDel() {
        $id = $this->getRestParam('user_id');
        if (empty($id))
            $this->returnError(RetailError::$PARAMS_PASS_ERROR);
        $res = UserService::service()->delUser($id);
        if ($res === true) {
//            \Utility::addActionLog("", "删除用户", "SystemUser", $id);
            $this->returnSuccess();
        } else
            $this->returnError($res);
    }


    /**
     * @api {GET} /admin/user/getRoles [getRoles]获取所有角色
     * @apiName getRoles
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     * @apiExample {json} 输入示例:
     *{
     *}
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回：
     *{
     *    "state": 0,
     *    "data": [
     *        {
     *            "id": "1",
     *            "name": "超级管理员",
     *            "right_codes": null,
     *            "order_index": "0",
     *            "type": "0",
     *            "status": "0",
     *            "remark": null,
     *            "create_time": null,
     *            "update_user": {
     *                "id": "0",
     *                "name": null
     *            },
     *            "update_time": null,
     *            "create_user": {
     *                "id": "0",
     *                "name": null
     *            }
     *        }
     *    ]
     *}
     * 失败返回：
     * {
     *      "state":1,
     *      "data": "错误信息"
     * }
     * @apiParam (输出字段) {string} state 错误码
     * @apiParam (输出字段) {array} data 操作信息
     */
    public function actionGetRoles() {
        $roles = RoleService::service()->getRoles();
        $this->returnSuccess(array_values($roles));
    }

    /**
     * @api {GET} /admin/user/userRight [userRight] 获取用户的权限
     * @apiName userRight
     * @apiParam (输入字段) {int} user_id 用户ID <font color=red>必填</font>
     * @apiExample {json} 输入示例:
     * {
     *  'user_id':2
     * }
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回，注意，该接口为异步接口，只返回接收成功：
     *{
     *    "state": 0,
     *    "data": {
     *        "user_right": [
     *            {
     *                "actions": null,
     *                "id": 1,
     *                "name": "系统管理",
     *                "code": "system",
     *                "parent_id": 0
     *            },
     *            {
     *                "actions": [
     *                    {
     *                        "name": "列表",
     *                        "code": "index"
     *                    },
     *                    {
     *                        "name": "详情",
     *                        "code": "detail"
     *                    }
     *                ],
     *                "id": 2,
     *                "name": "模块管理",
     *                "code": "systemmodule",
     *                "parent_id": 1
     *            },
     *            {
     *                "actions": [
     *                    {
     *                        "name": "列表",
     *                        "code": "index"
     *                    },
     *                    {
     *                        "name": "详情",
     *                        "code": "detail"
     *                    }
     *                ],
     *                "id": 3,
     *                "name": "系统用户",
     *                "code": "systemuser",
     *                "parent_id": 1
     *            }
     *        ]
     *    }
     *}
     * 失败返回：
     * {
     *      "code":1,
     *      "data":{}
     * }
     * @apiParam (输出字段) {string} code 错误码
     * @apiParam (输出字段) {array} data 成功时返回交易号，错误时返回错误码
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     */
    public function actionUserRight() {
        $userId = Mod::app()->request->getParam('user_id');
        if (empty($userId)) {
            $this->returnError(RetailError::$PARAMS_PASS_ERROR);
        }
        $userRight = AuthorizeService::service()->getUserRight($userId);
        $res = ['user_right' => []];
        if (!empty($userRight)) {
            $res = $userRight->getAttributes();
            $res['user_right'] = $res['moduleActions'];
            unset($res['moduleActions']);
        }

        $this->returnSuccess($res);
    }


    /**
     * @api {POST} /admin/user/saveRight [saveRight] 保存用户的权限
     * @apiName saveRight
     * @apiExample {json} 输入示例:
     * {
     *  "user_id":1,
     *  "user_right": [
     *            {
     *                "actions": null,
     *                "id": 1,
     *                "name": "系统管理",
     *                "code": "system",
     *                "parent_id": 0
     *            },
     *            {
     *                "actions": [
     *                    {
     *                        "name": "列表",
     *                        "code": "index"
     *                    },
     *                    {
     *                        "name": "详情",
     *                        "code": "detail"
     *                    }
     *                ],
     *                "id": 2,
     *                "name": "模块管理",
     *                "code": "systemmodule",
     *                "parent_id": 1
     *            },
     *            {
     *                "actions": [
     *                    {
     *                        "name": "列表",
     *                        "code": "index"
     *                    },
     *                    {
     *                        "name": "详情",
     *                        "code": "detail"
     *                    }
     *                ],
     *                "id": 3,
     *                "name": "系统用户",
     *                "code": "systemuser",
     *                "parent_id": 1
     *            }
     *        ]
     * }
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回，注意，该接口为异步接口，只返回接收成功：
     * {
     *      "code":1,
     *      "data":{}
     * }
     * 失败返回：
     * {
     *      "code":1,
     *      "data":{}
     * }
     * @apiParam (输出字段) {string} code 错误码
     * @apiParam (输出字段) {array} data 成功时返回交易号，错误时返回错误码
     * @apiGroup admin - user
     * @apiVersion 1.0.0
     */
    public function actionSaveRight() {
        $params = $this->getRestParams();
        if (empty($params)) {
            $this->renderError(RetailError::$PARAMS_PASS_ERROR);
        }

        $dto = new UserRightDTO();
        $dto->assignDTO($params);
        if (!$dto->validate()) {
            $this->returnError(BusinessError::outputError(RetailError::$OPERATE_FAILED, array('reason' => $this->formatModelErrors($dto->getErrors()))));
        }

        try {
            $entity = $dto->toEntity();//TODO
            $service = new UserRightService();
            $res = $service->saveUserRight($entity);
            if (is_string($res))
                $this->returnError($res);
            else
                $this->returnSuccess();
        } catch (Exception $e) {
            $this->returnError(BusinessError::outputError(RetailError::$OPERATE_FAILED, array('reason' => $e->getMessage())));
        }
    }
}