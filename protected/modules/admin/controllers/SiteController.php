<?php

use app\ddd\Admin\Application\Menu\MenuService;
use app\ddd\Admin\Application\Right\AuthorizeService;
use app\ddd\Admin\Application\User\UserService;
use ddd\Admin\DTO\User\SystemUserDTO;
use ddd\Infrastructure\DIService;
use ddd\Logistics\Domain\LogisticsCompany\ILogisticsCompanyRepository;

/**
 * User: liyu
 * Date: 2018/9/6
 * Time: 16:20
 * Desc: SiteController.php
 */
class SiteController extends WebAPIController
{
    public function pageInit() {
        parent::pageInit(); // TODO: Change the autogenerated stub
        $this->authorizedActions=["clear","getMenu", "getUserInfo", 'logout','updatePwd'];
        $this->guestActions = ['login'];
    }

    /**
     * @throws Exception
     */
    public function actionClear()
    {
        
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::ADMIN);
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::USER);
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::MODULE);
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::MAIN_ROLE);

        $logisticsId = Mod::app()->request->getParam('logistics_id');
        $phone       = Mod::app()->request->getParam('phone');
        $number      = Mod::app()->request->getParam('number');
        $openId      = Mod::app()->request->getParam('open_id');
        
        DIService::getRepository(ILogisticsCompanyRepository::class)->clearCache($logisticsId);
        DIService::getRepository(\ddd\Logistics\Domain\Driver\IDriverRepository::class)->clearCache();
        DIService::getRepository(\ddd\Logistics\Domain\Vehicle\IVehicleRepository::class)->clearCache($number);
        DIService::getRepository(\ddd\Customer\Domain\ICustomerRepository::class)->clearCache($phone, $openId);

        $keyName = SmsService::$cacheKeyPrefix.SmsService::$cacheNum.$phone;
        Utility::clearCache($keyName);
        
        //echo "OK";
        $this->returnSuccess();
    }

    /**
     * @api {POST} ;http://retail.oil.com/admin/site/login 用户登录
     * @apiName login
     * @apiParam (输入字段) {string} username 用户名，<font color=red>必填</font>
     * @apiParam (输入字段) {string} password 用户密码，<font color=red>必填</font>
     * @apiExample {json} 输入示例:
     *{
     *  "username": "liyu",
     *  "password": "123456"
     *}
     * @apiSuccessExample {json} 输出示例:
     * 成功返回：
     *{
     *    "code": 0,
     *    "data": "操作成功！"
     *}
     * @apiParam (输出字段) {string} code 错误码，为0时表示成功，其他参考错误码说明
     * @apiParam (输出字段) {string} data 成功或错误信息
     * @apiGroup admin/site
     * @apiVersion 1.0.0
     */
    public function actionLogin() {
        $params = Mod::app()->request->getRestParams();
        $userName = isset($params['username']) ? $params['username'] : '';
        $password = isset($params['password']) ? $params['password'] : '';
        if (empty($userName) || empty($password)) {
            $this->returnError('参数错误');
        }
        $identity = new UserIdentity(Utility::filterInject($userName), $password);
        if ($identity->authenticate() && $res = Mod::app()->user->login($identity, 86400)) {
//            $userInfo=\app\ddd\Admin\Application\User\UserService::service()->getUser($identity->id);
//            $this->returnSuccess($userInfo);
            $this->returnSuccess();
        } else {
            $this->returnError(UserIdentity::$errors[$identity->errorCode]);
        }
    }


    /**
     * @api {POST} admin/site/logout 退出登录
     * @apiName logout
     * @apiExample {json} 输入示例:
     * {
     *
     * }
     * @apiSuccessExample {json} 输出示例:
     * 成功返回：
     *{
     *    "code": 0,
     *    "data": "操作成功！"
     *}
     * @apiParam (输出字段) {string} code 错误码，为0时表示成功，其他参考错误码说明
     * @apiParam (输出字段) {string} data 成功或错误信息
     * @apiGroup admin/site
     * @apiVersion 1.0.0
     */
    public function actionLogout() {
        if (empty($this->userId)) {
            $this->returnError(RetailError::$NOT_LOGIN_IN[1], RetailError::$NOT_LOGIN_IN[0]);
        }
        Mod::app()->user->logout();
        $this->returnSuccess();
    }

    /**
     * @api {GET} admin/site/getMenu [getMenu] 系统菜单树
     * @apiName getMenu
     * @apiExample {json} 输入示例:
     * {
     *
     * }
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回，注意，该接口为异步接口，只返回接收成功：
     *{
     *    "state": 0,
     *    "data": [
     *        {
     *            "id": "1",
     *            "name": "系统管理",
     *            "code": "system",
     *            "icon": "<i class= \"icon icon-shezhi \"></i>",
     *            "system_id": "11",
     *            "parent_id": "0",
     *            "parent_ids": "",
     *            "page_url": "",
     *            "order_index": "1",
     *            "is_public": null,
     *            "is_external": null,
     *            "remark": null,
     *            "children": []
     *        }
     *    ]
     *}
     * 失败返回：
     * {
     *      "code":1,
     *      "data":{}
     * }
     * @apiParam (输出字段) {string} code 错误码
     * @apiParam (输出字段) {array} data 成功时返回交易号，错误时返回错误码
     * @apiGroup admin/site
     * @apiVersion 1.0.0
     */
    public function actionGetMenu() {
        if (empty($this->userId)) {
            $this->returnError(RetailError::$NOT_LOGIN_IN[1], RetailError::$NOT_LOGIN_IN[0]);
        }
        $treeData = MenuService::service()->getUserMenu($this->userId);
        $tree = $treeData->getAttributes();
        $this->returnSuccess($tree['children']);
    }

    /**
     * @api {GET} admin/site/getUserInfo [getUserInfo] 获取用户基本信息
     * @apiName getUserInfo
     * @apiExample {json} 输入示例:
     * {
     *
     * }
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回，注意，该接口为异步接口，只返回接收成功：
     *{
     *    "state": 0,
     *    "data": {
     *        "user_id": "2",
     *        "user_name": "liyu",
     *        "role_array": null,
     *        "main_role_id": null,
     *        "main_role_name": null,
     *        "identity": "",
     *        "weixin": "",
     *        "phone": "15013408878",
     *        "email": "",
     *        "status": "1",
     *        "status_name": null,
     *        "is_right_role": null,
     *        "name": "李钰",
     *        "remark": "",
     *        "user_right": [
     *            {
     *                "actions": [
     *                    {
     *                        "name": "列表",
     *                        "code": "index"
     *                    },
     *                    {
     *                        "name": "详情",
     *                        "code": "detail"
     *                    }
     *                ],
     *                "id": 1,
     *                "name": "系统管理",
     *                "code": "system"
     *            }
     *        ]
     *    }
     *}
     * 失败返回：
     * {
     *      "code":1,
     *      "data":{}
     * }
     * @apiParam (输出字段) {string} code 错误码
     * @apiParam (输出字段) {array} data 成功时返回交易号，错误时返回错误码
     * @apiGroup admin/site
     * @apiVersion 1.0.0
     */
    public function actionGetUserInfo() {
        if (empty($this->userId)) {
            $this->returnError(RetailError::$NOT_LOGIN_IN[1], RetailError::$NOT_LOGIN_IN[0]);
        }
        $user = Utility::getNowUser();
        $userDTO = new SystemUserDTO();
        $userDTO->fromEntity($user);

        $userInfo = $userDTO->getAttributes();
        unset($userInfo['password']);
        unset($userInfo['confirmPassword']);

        $userRight = AuthorizeService::service()->getUserRight($user->user_id);
//        if (!empty($userRight)) {
//            $modules = $userRight->getModuleActions();
//            $modulesArray = [];
//            if (Utility::isNotEmpty($modules)) {
//                foreach ($modules as $module) {
//                    $modulesArray[$module->id] = $module->getAttributes();
//                    $actions = $module->getActions();
//                    if (Utility::isNotEmpty($actions)) {
//                        $actionArr = [];
//                        foreach ($actions as $action) {
//                            $actionArr[] = $action->getAttributes();
//                        }
//                    }
//                    $modulesArray[$module->id]['actions'] = $actionArr;
//                }
//            }
//            $userInfo['user_right'] = array_values($modulesArray);
//        }

        $userInfo['user_right'] = [];
        if (!empty($userRight)) {
            $res = $userRight->getAttributes();
            $userInfo['user_right'] = $res['moduleActions'];
            unset($res['moduleActions']);
        }


        $this->returnSuccess($userInfo);
    }


    /**
     * @api {POST} admin/site/updatePwd [updatePwd] 修改密码
     * @apiName updatePwd
     * @apiExample {json} 输入示例:
     *   {
     *   "password": "e10adc3949ba59abbe56e057f20f883e",
     *   "newPassword": "96e79218965eb72c92a549dd5a330112",
     *   "confirmPassword": "96e79218965eb72c92a549dd5a330112",
     *   }
     * @apiSuccessExample {json} 输出示例:
     * 接收成功返回，注意，该接口为异步接口，只返回接收成功：
     *{
     *
     *}
     * 失败返回：
     * {
     *      "code":1,
     *      "data":{}
     * }
     * @apiParam (输出字段) {string} code 错误码
     * @apiParam (输出字段) {array} data 成功时返回交易号，错误时返回错误码
     * @apiGroup admin/site
     * @apiVersion 1.0.0
     */
    public function actionUpdatePwd() {
        if (Mod::app()->user->isGuest) {
            $this->returnError(RetailError::$NOT_LOGIN_IN[1], RetailError::$NOT_LOGIN_IN[0]);
        }
        $params = $this->getRestParams();
        if (empty($params["password"]))
            $this->returnError("原密码不得为空！");
        if (empty($params["newPassword"]))
            $this->returnError("新密码不得为空！");
        if ($params["newPassword"] != $params["confirmPassword"])
            $this->returnError("新密码与确认密码不一致！");

        try {
            $res = UserService::service()->updatePwd($params);
        } catch (Exception $e) {
            $this->returnError(BusinessError::outputError(RetailError::$OPERATE_FAILED, array('reason' => $e->getMessage())));
        }

        $this->returnSuccess();
    }


}