<?php

class TestController extends Controller
{
    public function pageInit() {
        parent::pageInit(); // TODO: Change the autogenerated stub
        $this->publicActions = ["index", "clear", "quota"];
    }

    public function actionClear()
    {
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::ADMIN);
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::USER);
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::MODULE);
        \app\ddd\Admin\Repository\CacheDependency::clearDependencyCache(\app\ddd\Admin\Repository\CacheDependency::MAIN_ROLE);
        
        echo "OK";
    }


    public function actionIndex()
    {

        $d=new \ddd\Common\Domain\Value\DateTime(null);
        var_dump($d);
        return;

        $a=[];
        echo json_encode($a);
        return;

        /*$a1=["index"=>"index","list"=>"333"];
        $a2=array_values($a1);
        var_dump($a2);*/

        $userRight=\app\ddd\Admin\Repository\Right\UserRightRepository::repository()->findById(2);

        //var_dump($userRight);
        $data=$userRight->getAttributes();
        //var_dump($data);
        echo json_encode($data);

        return;
        $methodName = "setMyName";
        preg_match('~^(set|get)([A-Z])(.*)$~', $methodName, $matches);

        var_dump($matches);

        return;
        $menu = \ddd\Admin\Repository\Menu\MenuRepository::repository()->load();
        //var_dump($menu);

        $menuDTO = new \app\ddd\Admin\DTO\Menu\MenuDTO();
        $menuDTO->fromEntity($menu);

        \app\ddd\Cache\Application\CacheService::service()->setCache("test", "OK", 0, "t1");

        $cacheValue = app\ddd\Cache\Application\CacheService::service()->getCacheValue("test");
        echo "result1:\r\n";
        var_dump($cacheValue);

        //\app\ddd\Cache\Application\CacheService::service()->clearCache("t1");
        //\app\ddd\Cache\Application\CacheService::service()->setCache("t1","12",20);


        //$cache=new \app\ddd\Cache\Domain\Cache("test",$menuDTO);
        //$cache=new \app\ddd\Cache\Domain\Cache("test","OK",10);
        //var_dump($cache);
        //\app\ddd\Cache\Repository\RedisCacheRepository::repository()->setCache($cache);

        $cacheValue = app\ddd\Cache\Application\CacheService::service()->getCacheValue("test");
        echo "result2:\r\n";
        var_dump($cacheValue);
        //sleep(11);
        //echo "result2:".$cache->getValue();
        echo "\r\n";
        //$str=serialize($cache);
        //echo $str;
        return;

        //var_dump($menuDTO);

        $values = $menuDTO->getAttributes();
        var_dump($values);

        return;
        $userRight = new \app\ddd\Admin\Domain\Right\UserRight();
        $module = new \app\ddd\Admin\Domain\Module\ModuleAction();
        $module->id = 1;
        $module->code = "system";
        $module->name = "系统管理";
        $module->addAction(new \app\ddd\Admin\Domain\Module\Action("列表", "index"));
        $module->addAction(new \app\ddd\Admin\Domain\Module\Action("添加", "add"));
        $module->addAction(new \app\ddd\Admin\Domain\Module\Action("修改", "edit"));
        $userRight->addModuleAction($module);

        $module->id = 2;
        $module->code = "system2";
        $module->name = "系统管理2";
        $userRight->addModuleAction($module);

        $str = serialize($userRight);
        echo $str;

        echo "\r\n";

        $userRight2 = unserialize($str);

        $str2 = serialize($userRight2);
        echo $str2;
        echo "\r\n";
        echo "\r\n";
        $values = $userRight->getAttributes();
        var_dump($values);

        //$this->render('index');
    }

    public function actionQuota() {
        /******************** 物流企业限额start ********************/
        $service = \ddd\Infrastructure\DIService::get(\app\ddd\Quota\Application\LogisticsQuotaLimit\LogisticsQuotaLimitService::class);
        //创建物流企业限额
        //$res = $service->create(0.75);

        //获取生效的物流企业限额
        //$res = $service->getActiveLogisticsQuotaLimit();
        /******************** 物流企业限额end ********************/


        /******************** 车辆限额start ********************/
        $service = \ddd\Infrastructure\DIService::get(\app\ddd\Quota\Application\VehicleQuotaLimit\VehicleQuotaLimitService::class);
        //$res = $service->create(0.85);

        //$res = $service->getActiveVehicleQuotaLimit(0.85);
        /******************** 车辆限额end ********************/


        /******************** 物流企业额度start ********************/
        $service = \ddd\Infrastructure\DIService::get(\ddd\Quota\Application\LogisticsQuota\LogisticsQuotaService::class);
        //获取物流企业额度
        //$res = $service->getLogisticsQuota(2);

        //获取物流企业当日额度
        //$res = $service->getLogisticsDailyQuota(2);
        /******************** 物流企业额度end ********************/


        /******************** 车辆额度start ********************/
        $service = \ddd\Infrastructure\DIService::get(\ddd\Quota\Application\VehicleQuota\VehicleDailyQuotaService::class);
        //获取车辆当日额度
        $res = $service->getVehicleDailyQuota(25);
        /******************** 车辆额度end ********************/

        var_dump($res);
        die;
    }

    public function actionOrder()
    {
        $service = \ddd\Infrastructure\DIService::get(\ddd\Order\Application\OrderOutService::class);
        //获取车辆可用额度信息
        //$res = $service->getVehicleMaxOilQuantity(2, 1, 2);

        //下单
        //$res = $service->doOrder(2, 2, 1, 2, '10.1', '1231321');

        //获取订单详情
        $res = $service->getOrderDetail("201809180000014");

        $cmd = new OrderCMD();
        //$res =$cmd->getCustomerOrders(['customer_id' => 2]);
        var_dump($res);
        die;
    }

    public function actionStation() {
        $params = [
//            'cmd' => '91030004',
//            'cmd' => '91030003',
//            'cmd' => '91030001',
            'cmd' => '91030002',
            'data' => [
                'station_id' => 15,
                'user_id' => 1,
                'longitude' => 113.9604700000,
                'latitude' => 22.5683020000,
//                'name' => '',
//                'max_distance' => 100,
            ]
        ];
        $res = $this->invoke($params);
        $this->returnSuccess($res);
    }

    /**
     * @param $cmd
     * @param $params
     * @return \app\cmd\CMDResult
     * @throws \Exception
     */
    private function invoke($params) {
        $service = new OilStationCMD();
        try {
            return $service->invoke($params);
        } catch (Exception $e) {
            echo $e->getMessage();exit;
            Mod::log('INVOKE Error[' . json_encode($params) . ']:' . $e->getMessage(), "error");
            return new \app\cmd\CMDResult(CMDCode::CODE_CMD_ERROR);
        }
    }

    // Uncomment the following methods and override them if needed
    /*
    public function filters()
    {
        // return the filter configuration for this controller, e.g.:
        return array(
            'inlineFilterName',
            array(
                'class'=>'path.to.FilterClass',
                'propertyName'=>'propertyValue',
            ),
        );
    }

    public function actions()
    {
        // return external action classes, e.g.:
        return array(
            'action1'=>'path.to.ActionClass',
            'action2'=>array(
                'class'=>'path.to.AnotherActionClass',
                'propertyName'=>'propertyValue',
            ),
        );
    }
    */


}