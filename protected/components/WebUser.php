<?php

use app\ddd\Admin\Application\User\UserService;

/**
 * Created by youyi000.
 * DateTime: 2017/4/12 20:40
 * Describe：
 */
class WebUser extends CWebUser
{

    const RedisSessionKey="oil_retail_system_user";

    public $user;

    public function init()
    {
        if (Mod::app() instanceof CConsoleApplication)
        {
            $this->id =0;
            return false;
        }
        //$this->loginUrl=array('/site/login');
        $this->authTimeout=3600*10; //设置Cookies保持自动登录的时长
        parent::init();
    }

    public function __construct()
    {
        $this->allowAutoLogin=true;
        $this->setStateKeyPrefix("oil_retail_ao389kd9433");
        $this->loginRequiredAjaxResponse="请先登录";
    }

    /**
     * @param UserIdentity $identity
     * @param int $duration
     * @return bool
     */
    public function login($identity,$duration=0)
    {
        $this->user=$identity->user;
        return parent::login($identity,$duration);
    }

    protected function beforeLogin($id, $states, $fromCookie)
    {
        if($fromCookie)
        {
            $secret=Utility::hGetCache(static::RedisSessionKey,$id);
            if($states["token"]!=$secret)
                return false;
        }

        return parent::beforeLogin($id, $states, $fromCookie); // TODO: Change the autogenerated stub
    }

    /**
     * 当前用户是否是游客身份，增加了加密串的判断，暂时不启用
     * @return bool
     */
    /*public function getIsGuest()
    {
        $id=$this->getState('__id');
        if($id===null)
            return true;
        $secret=Utility::hGetCache(SystemUser::RedisSessionKey,$id);
        if($this->getState("token")!=$secret)
            return true;
        else
            return false;
    }*/

    protected function afterLogin($fromCookie)
    {
        parent::afterLogin($fromCookie);

        $this->getUser();
        /*SystemUser::setFormattedRightCodes($this->user["user_id"],$this->user["right_codes"]);
        SystemUser::updateLoginInfo($this->user["user_id"]);*/
        UserService::service()->updateLoginInfo($this->user["user_id"]);
    }

    public function getUser()
    {
        if(empty($this->user))
            $this->user=SystemUser::model()->findByPk(Mod::app()->user->id);
    }

    /**
     * Redirects the user browser to the login page.
     * Before the redirection, the current URL (if it's not an AJAX url) will be
     * kept in {@link returnUrl} so that the user browser may be redirected back
     * to the current page after successful login. Make sure you set {@link loginUrl}
     * so that the user browser can be redirected to the specified login URL after
     * calling this method.
     * After calling this method, the current request processing will be terminated.
     */
    public function loginRequired()
    {
        $app=Mod::app();
        $request=$app->getRequest();

        if(!$request->getIsAjaxRequest())
        {
            $this->setReturnUrl($request->getUrl());
            if(($url=$this->loginUrl)!==null)
            {
                if(is_array($url))
                {
                    $route=isset($url[0]) ? $url[0] : $app->defaultController;
                    $url=$app->createUrl($route,array_splice($url,1));
                }
                $request->redirect($url);
            }
        }
        elseif(isset($this->loginRequiredAjaxResponse))
        {
//            echo $this->loginRequiredAjaxResponse;
            $res=[
                'state'=>RetailError::$NOT_LOGIN_IN[0],
                'data'=>RetailError::$NOT_LOGIN_IN[1]
            ];
            echo json_encode($res);
            Mod::app()->end();
        }

        throw new CHttpException(403,Mod::t('mod','Login Required'));
    }


}